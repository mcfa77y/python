#!/cygdrive/c/Python30/python
# -*- coding: utf-8 -*-
import math
"""
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

3
7 4
2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:
"""
TRI ="3\
 7 4\
 2 4 6\
 8 5 9 3".split(' ')
"""
TRI = \
 "75\
 95 64\
 17 47 82\
 18 35 87 10\
 20 04 82 47 65\
 19 01 23 75 03 34\
 88 02 77 73 07 63 67\
 99 65 04 28 06 16 70 92\
 41 41 26 56 83 40 80 70 33\
 41 48 72 33 47 32 37 16 94 29\
 53 71 44 65 25 43 91 52 97 51 14\
 70 11 33 28 77 73 17 78 39 68 17 57\
 91 71 52 38 17 14 91 43 58 50 27 29 48\
 63 66 04 68 89 53 67 30 73 16 69 87 40 31\
 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23".split(' ')
"""
TREE=[]
TREE_MAP={}
def calcRow(x):
	x+=1
	if x==0:
		return 0
	i = 1/2*(math.sqrt(8*x+1)-1)
	fi = math.floor(i)
	#print('\tx',x,'i',i,'fi',fi)
	return fi
def buildTree():
	global TRI,TREE
	oldRow = -1
	nums=[]
	for i,v in enumerate(TRI):
		#print('v: ',v)
		newRow = calcRow(i)
		#print('\told row: ',oldRow,'new row: ',newRow)
		nums.append(int(v))
		if oldRow!=newRow:
			print(newRow,nums)
			TREE.append(nums)
			nums=[]
			oldRow=newRow
		#print(i,v, calcRow(i))
	#print('TREE:',TREE)
def sumTreePath(x,y):
	global TREE_MAP
	x=0 if x<=0 else x
	y=0 if y<=0 else y
	x=y if x>=y else x
	currentValue = TREE[y][x]
	print('y: ',y,'x: ',x,'v: ',currentValue)
	if y==len(TREE)-1:
		return TREE[y][x]
	try:
		if TREE_MAP[(y,x)]:
			print('hit x:',x,'y',y,'v: ',TREE_MAP[(y,x)])
			return TREE_MAP[(y,x)]
	except:
		#go left
		TREE_MAP[(y+1,x)] = sumTreePath(x,y+1)
		q = currentValue+TREE_MAP[(y+1,x)] 
		#go right
		TREE_MAP[(y+1,x+1)] = sumTreePath(x+1,y+1)
		p = currentValue+TREE_MAP[(y+1,x+1)]
		print('L: ',q,'R: ',p)
		return max(q,p)

def main():
	global TREE_MAP
	buildTree()
	print(sumTreePath(0,0))
	print(len(TREE_MAP),TREE_MAP)
main() 
