#!/usr/bin/python
import sys,os,math
q = 600851475143 
r = 13195
prime = set([0,1,2])
maxPrime = 1
mx = 0
strLen = 4
matrix="08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\
 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\
 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\
 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\
 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\
 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\
 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\
 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\
 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\
 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\
 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\
 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\
 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\
 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\
 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\
 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\
 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\
 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\
 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\
 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
def isPrime(x):
	factors=[]
	if x==2:
		return True
	if x%2==0:
		return False

	if x in prime:
		return True
		
	for i in range(maxPrime,int(math.ceil(math.sqrt(x)))+1,2):
		if x%i==0:
			factors.append(i)
		if len(factors)>2:
			return False
	#print x,factors
	if len(factors)<=1:
		return True 
	else:
		return False
def genOddFactors(x):
	factors =[]
	for i in range(maxPrime,int(math.ceil(math.sqrt(x))),2):
		if x%i==0:
			factors.append(i)
	return factors
		
def isPalendrom(x):
	s = str(x)
	t = s[::-1]
	return s==t
# finds the max product in a string of a sublength strLen
def findMaxProduct(st, strLen):
	mxString = ""
	mx=1
	for i in range(len(st)-strLen):
		subSt = st[i:i+strLen]
		product = 1
		for x in subSt:
			product*=int(x)
		if product>mx:
			mx=product
			mxString = ''.join(str(subSt)+',')
	print mxString,mx
	return mx
def sumGrid():
	global mx, strLen
	array = matrix.split(' ')
	mod = 20
	r = range(mod)
	# horizontal
	mx = 1
	m=[]
	for i in r:
		nums = array[i*mod:(i+1)*mod]
		m.append(nums)
		doMax(nums)
	print 'horizontal max', mx

	# verticle
	for i in r:
		for j in r:
			nums.append(m[j][i])
		#print "nums: ",nums
		doMax(nums)

	print 'verticle max', mx

	# diagnal /
	for i in range(strLen,mod-1):
		for j in range(0,i):
			nums.append(m[i-j][j])
		print nums
		doMax(nums)

	while j<strLen-1:
		for j in range(1,mod-1):
		     nums.append(m[mod-j-1][j])
		print nums
		doMax(nums)
	print '/ max',mx
#takes in an array and then gets returns the maximum
def doMax(nums):
	global mx, strLen
	product = findMaxProduct(nums,strLen)
	if product>mx:
		mx=product
	del nums
	nums=[]
	
def pythagoreanTriples():
	a=-80
	while True:
		
		a+=1
		if a%2==0:
		       b = a*a/4 - 1
		       c = b + 2 
		else:
			b = a*a/2 - 1/2
			c = b + 1
		print a,b,c,a+b+c				
		if (a+b+c==1000):
			break
		if (a+b+c>6500):
			break
	print a,b,c,a+b+c				
main()

